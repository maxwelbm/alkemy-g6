basePath: /
definitions:
  buyersctl.BuyerCreateJSON:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  buyersctl.BuyerResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  buyersctl.BuyerUpdateJSON:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  carriesctl.CarriesCreateJSON:
    properties:
      address:
        type: string
      cid:
        type: string
      company_name:
        type: string
      locality_id:
        type: integer
      phone_number:
        type: string
    type: object
  employeesctl.EmployeesAttributes:
    properties:
      card_number_id:
        type: string
      count_reports:
        type: integer
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  employeesctl.EmployeesFinalJSON:
    properties:
      data:
        items:
          $ref: '#/definitions/employeesctl.EmployeesAttributes'
        type: array
    type: object
  employeesctl.EmployeesReqJSON:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  employeesctl.EmployeesResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  inboundordersctl.InboundOrdersReqJSON:
    properties:
      employee_id:
        type: integer
      id:
        type: integer
      order_date:
        type: string
      order_number:
        type: integer
      product_batch_id:
        type: integer
      warehouse_id:
        type: integer
    type: object
  inboundordersctl.InboundOrdersResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  localitiesctl.CarryReportJSON:
    properties:
      carries_count:
        type: integer
      id:
        type: integer
      locality_name:
        type: string
    type: object
  localitiesctl.LocalityResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  localitiesctl.NewLocalityJSON:
    properties:
      country_name:
        type: string
      locality_name:
        type: string
      province_name:
        type: string
    type: object
  models.BuyerPurchaseOrdersReportJSON:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      purchase_orders_count:
        type: integer
    type: object
  models.LocalityDTO:
    properties:
      countryName:
        type: string
      localityName:
        type: string
      provinceName:
        type: string
    type: object
  models.SectionDTO:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: number
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      product_type_id:
        type: integer
      section_number:
        type: string
      warehouse_id:
        type: integer
    type: object
  productbatchesctl.NewProductBatchesReqJSON:
    properties:
      batch_number:
        type: string
      current_quantity:
        type: integer
      current_temperature:
        type: number
      due_date:
        type: string
      initial_quantity:
        type: integer
      manufacturing_date:
        type: string
      manufacturing_hour:
        type: string
      minimum_temperature:
        type: number
      product_id:
        type: integer
      section_id:
        type: integer
    type: object
  productbatchesctl.ProductBatchesResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  productrecordsctl.ProductRecordCreateJSON:
    properties:
      last_update_date:
        type: string
      product_id:
        type: integer
      purchase_price:
        type: number
      sale_price:
        type: number
    type: object
  productrecordsctl.ProductRecordResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  productsctl.NewProductAttributesJSON:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: number
      height:
        type: number
      length:
        type: number
      net_weight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temp:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  productsctl.ProductResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  productsctl.ReportRecordsResJSON:
    properties:
      data: {}
    type: object
  productsctl.UpdateProductAttributesJSON:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: number
      height:
        type: number
      length:
        type: number
      net_weight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temp:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  purchaseordersctl.PurchaseOrdersJSON:
    properties:
      buyer_id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      product_record_id:
        type: integer
      tracking_code:
        type: string
    type: object
  purchaseordersctl.ResPurchaseOrdersJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  sectionsctl.NewSectionReqJSON:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: number
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      product_type_id:
        type: integer
      section_number:
        type: string
      warehouse_id:
        type: integer
    type: object
  sectionsctl.ReportProductFullJSON:
    properties:
      products_count:
        type: integer
      section_id:
        type: integer
      section_number:
        type: string
    type: object
  sectionsctl.SectionFullJSON:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: number
      id:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      product_type_id:
        type: integer
      section_number:
        type: string
      warehouse_id:
        type: integer
    type: object
  sellersctl.SellerCreateJSON:
    properties:
      address:
        type: string
      cid:
        type: string
      company_name:
        type: string
      locality_id:
        type: integer
      telephone:
        type: string
    type: object
  sellersctl.SellerResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
  sellersctl.SellerUpdateJSON:
    properties:
      address:
        type: string
      cid:
        type: string
      company_name:
        type: string
      locality_id:
        type: integer
      telephone:
        type: string
    type: object
  warehousesctl.WarehouseReqJSON:
    properties:
      address:
        type: string
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      telephone:
        type: string
      warehouse_code:
        type: string
    type: object
  warehousesctl.WarehouseResJSON:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the FrescosAPI documentation.
  title: FrescosAPI
  version: "1.0"
paths:
  /api/v1/buyers:
    get:
      description: Retrieve a list of all buyers from the database
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/buyersctl.BuyerResJSON'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all buyers
      tags:
      - buyers
    post:
      consumes:
      - application/json
      description: Create a new buyer with the provided details
      parameters:
      - description: Buyer details
        in: body
        name: buyer
        required: true
        schema:
          $ref: '#/definitions/buyersctl.BuyerCreateJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/buyersctl.BuyerResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new buyer
      tags:
      - buyers
  /api/v1/buyers/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a buyer from the system by their ID.
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a buyer
      tags:
      - buyers
    get:
      consumes:
      - application/json
      description: Get details of a buyer by their ID
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/buyersctl.BuyerResJSON'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Buyer not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get buyer by ID
      tags:
      - buyers
    patch:
      consumes:
      - application/json
      description: Update an existing buyer's details by ID
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Buyer Update JSON
        in: body
        name: buyer
        required: true
        schema:
          $ref: '#/definitions/buyersctl.BuyerUpdateJSON'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/buyersctl.BuyerResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update buyer
      tags:
      - buyers
  /api/v1/buyers/reportPurchaseOrders:
    get:
      consumes:
      - application/json
      description: Retrieve the report of purchase orders for a given buyer ID
      parameters:
      - description: Buyer ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BuyerPurchaseOrdersReportJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Buyer not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get report of purchase orders by buyer ID
      tags:
      - buyers
  /api/v1/carries:
    post:
      description: Create a new carry in the database
      parameters:
      - description: Carry to create
        in: body
        name: carry
        required: true
        schema:
          $ref: '#/definitions/carriesctl.CarriesCreateJSON'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/carriesctl.CarriesCreateJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new carry
      tags:
      - carries
  /api/v1/employees:
    get:
      description: Fetches all employees from the database and returns them as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK - The employees were successfully retrieved
          schema:
            $ref: '#/definitions/employeesctl.EmployeesFinalJSON'
        "500":
          description: Internal Server Error - An unexpected error occurred during
            the retrieval process
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve all employees
      tags:
      - employees
    post:
      consumes:
      - application/json
      description: Create a new employee with the provided JSON data
      parameters:
      - description: Employee JSON
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/employeesctl.EmployeesReqJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/employeesctl.EmployeesResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new employee
      tags:
      - employees
  /api/v1/employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a employee
      tags:
      - employees
    get:
      consumes:
      - application/json
      description: Get employee details by their ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/employeesctl.EmployeesResJSON'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve employee by ID
      tags:
      - employees
    patch:
      consumes:
      - application/json
      description: Update an existing employee by their ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Employee JSON
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/employeesctl.EmployeesReqJSON'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/employeesctl.EmployeesResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update employee by ID
      tags:
      - employees
  /api/v1/employees/reportInboundOrders:
    get:
      consumes:
      - application/json
      description: Get report of inbound orders for an employee by their ID
      parameters:
      - description: Employee ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/employeesctl.EmployeesResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve report of inbound orders for an employee by their ID
      tags:
      - employees
  /api/v1/inboundOrders:
    post:
      consumes:
      - application/json
      description: Create a new inbound order with the provided JSON data
      parameters:
      - description: Inbound Order JSON
        in: body
        name: inboundOrder
        required: true
        schema:
          $ref: '#/definitions/inboundordersctl.InboundOrdersReqJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/inboundordersctl.InboundOrdersResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new inbound order
      tags:
      - inbound_orders
  /api/v1/localities:
    post:
      consumes:
      - application/json
      description: Create a new locality with the provided JSON payload
      parameters:
      - description: New Locality JSON
        in: body
        name: locality
        required: true
        schema:
          $ref: '#/definitions/localitiesctl.NewLocalityJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LocalityDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new locality
      tags:
      - localities
  /api/v1/localities/reportCarries:
    get:
      description: Retrieve the number of carries in a locality by ID
      parameters:
      - description: Carry ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/localitiesctl.CarryReportJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get locality carries report
      tags:
      - localities
  /api/v1/localities/reportSellers:
    get:
      description: Retrieve the number of sellers in a locality by ID
      parameters:
      - description: Locality ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/localitiesctl.LocalityResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get locality sellers report
      tags:
      - localities
  /api/v1/product_batches:
    post:
      consumes:
      - application/json
      description: Create a new product batch with the provided JSON data
      parameters:
      - description: Product Batch Create JSON
        in: body
        name: productBatch
        required: true
        schema:
          $ref: '#/definitions/productbatchesctl.NewProductBatchesReqJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/productbatchesctl.ProductBatchesResJSON'
        "400":
          description: Error ao decodificar JSON
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new product batch
      tags:
      - product_batches
  /api/v1/product_records:
    post:
      consumes:
      - application/json
      description: Create a new product record with the provided JSON data
      parameters:
      - description: Product Record Create JSON
        in: body
        name: productRecord
        required: true
        schema:
          $ref: '#/definitions/productrecordsctl.ProductRecordCreateJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/productrecordsctl.ProductRecordResJSON'
        "400":
          description: Error ao decodificar JSON
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new product record
      tags:
      - product_records
  /api/v1/products:
    get:
      description: Retrieve a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/productsctl.ProductResJSON'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided attributes
      parameters:
      - description: Product attributes
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/productsctl.NewProductAttributesJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/productsctl.ProductResJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product by its ID from the database.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            $ref: '#/definitions/productsctl.ProductResJSON'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - cannot delete or update parent row
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by its unique ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product found
          schema:
            $ref: '#/definitions/productsctl.ProductResJSON'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get product by ID
      tags:
      - products
    patch:
      consumes:
      - application/json
      description: Update an existing product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product attributes to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/productsctl.UpdateProductAttributesJSON'
      produces:
      - application/json
      responses:
        "200":
          description: Updated product
          schema:
            $ref: '#/definitions/productsctl.ProductResJSON'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Duplicate entry
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /api/v1/products/reportRecords:
    get:
      description: Retrieves report records for a product based on the provided product
        ID.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved report records
          schema:
            $ref: '#/definitions/productsctl.ReportRecordsResJSON'
        "400":
          description: Invalid product ID or bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve report records for a product
      tags:
      - products
  /api/v1/purchaseOrders:
    post:
      consumes:
      - application/json
      description: Accepts a JSON payload, validates it, and creates a purchase order
        in the system.
      parameters:
      - description: Purchase Order JSON
        in: body
        name: purchaseOrder
        required: true
        schema:
          $ref: '#/definitions/purchaseordersctl.PurchaseOrdersJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/purchaseordersctl.ResPurchaseOrdersJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new purchase order
      tags:
      - purchase_orders
  /api/v1/sections:
    get:
      consumes:
      - application/json
      description: Get all sections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/sectionsctl.SectionFullJSON'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all sections
      tags:
      - sections
    post:
      consumes:
      - application/json
      description: Create a new section with the provided JSON payload
      parameters:
      - description: New Section JSON
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/sectionsctl.NewSectionReqJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SectionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new section
      tags:
      - sections
  /api/v1/sections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a section by ID
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a section
      tags:
      - sections
    get:
      consumes:
      - application/json
      description: Get a section by ID
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sectionsctl.SectionFullJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a section by ID
      tags:
      - sections
    patch:
      consumes:
      - application/json
      description: Update a section by ID
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Section JSON
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/sectionsctl.NewSectionReqJSON'
      produces:
      - application/json
      responses:
        "200":
          description: Updated
          schema:
            $ref: '#/definitions/models.SectionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a section
      tags:
      - sections
  /api/v1/sections/reportProducts:
    get:
      description: Retrieves report products for a section based on the provided section
        ID.
      parameters:
      - description: Section ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved report products
          schema:
            items:
              $ref: '#/definitions/sectionsctl.ReportProductFullJSON'
            type: array
        "400":
          description: Invalid section ID or bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Section not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve report products for a section
      tags:
      - sections
  /api/v1/sellers:
    get:
      description: This endpoint retrieves all sellers from the database using the
        service layer.
      produces:
      - application/json
      responses:
        "200":
          description: OK - The sellers were successfully retrieved
          schema:
            $ref: '#/definitions/sellersctl.SellerResJSON'
        "500":
          description: Internal Server Error - An unexpected error occurred during
            the retrieval process
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve all sellers
      tags:
      - sellers
    post:
      consumes:
      - application/json
      description: This endpoint creates a new seller based on the provided JSON request
        body.
      parameters:
      - description: Seller Create JSON
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/sellersctl.SellerCreateJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Seller created successfully
          schema:
            $ref: '#/definitions/sellersctl.SellerResJSON'
        "400":
          description: Invalid request data or JSON decoding error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - Duplicate entry
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new seller
      tags:
      - sellers
  /api/v1/sellers/{id}:
    delete:
      description: This endpoint deletes a seller based on the provided ID in the
        URL parameter.
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content - The seller was successfully deleted
        "400":
          description: Bad Request - The request ID is invalid or less than 1
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found - The seller with the specified ID does not exist
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - The seller cannot be deleted due to a MySQL foreign
            key constraint error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error - An unexpected error occurred during
            the deletion process
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a seller
      tags:
      - sellers
    get:
      description: This endpoint retrieves a seller based on the provided ID in the
        URL parameter.
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success - The seller was successfully retrieved
          schema:
            $ref: '#/definitions/sellersctl.SellerResJSON'
        "400":
          description: Bad Request - The request ID is invalid or less than 1
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found - The seller with the specified ID does not exist
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a seller by ID
      tags:
      - sellers
    patch:
      consumes:
      - application/json
      description: This endpoint updates a seller based on the provided ID in the
        URL parameter and the JSON request body.
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Seller update data
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/sellersctl.SellerUpdateJSON'
      produces:
      - application/json
      responses:
        "200":
          description: Success - The seller was successfully updated
          schema:
            $ref: '#/definitions/sellersctl.SellerResJSON'
        "400":
          description: Bad Request - The seller cannot be updated due to a MySQL cannot
            add or update child row error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - The seller cannot be updated due to a MySQL duplicate
            entry error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error - An unexpected error occurred during
            the update process
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a seller
      tags:
      - sellers
  /api/v1/warehouses:
    get:
      description: This endpoint retrieves all warehouses from the database using
        the service layer.
      produces:
      - application/json
      responses:
        "200":
          description: OK - The warehouses were successfully retrieved
          schema:
            $ref: '#/definitions/warehousesctl.WarehouseResJSON'
        "500":
          description: Internal Server Error - An unexpected error occurred during
            the retrieval process
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve all warehouses
      tags:
      - warehouses
    post:
      consumes:
      - application/json
      description: Creates a new warehouse with the provided information.
      parameters:
      - description: Warehouse JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/warehousesctl.WarehouseReqJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/warehousesctl.WarehouseResJSON'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - duplicate entry
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new warehouse
      tags:
      - warehouses
  /api/v1/warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a warehouse by its ID from the database.
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            $ref: '#/definitions/warehousesctl.WarehouseResJSON'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Warehouse not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - cannot delete or update parent row
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a warehouse
      tags:
      - warehouses
    get:
      description: Retrieve warehouse details by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/warehousesctl.WarehouseResJSON'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Warehouse not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get warehouse by ID
      tags:
      - warehouses
    patch:
      consumes:
      - application/json
      description: Update a warehouse by its ID
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Warehouse JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/warehousesctl.WarehouseReqJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK - The warehouse was successfully updated
          schema:
            $ref: '#/definitions/warehousesctl.WarehouseResJSON'
        "400":
          description: Bad request - invalid ID format or incomplete data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not found - the warehouse does not exist
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict - duplicate entry
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a warehouse
      tags:
      - warehouses
swagger: "2.0"
